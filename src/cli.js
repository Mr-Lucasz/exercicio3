/**
 * @fileoverview Interface de linha de comando para o sistema de criptografia
 * @author lucas Rodrigues
 * @version 1.0.0
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');
const CryptoManager = require('./crypto');

/**
 * Classe para gerenciar a interface de linha de comando
 */
class CLI {
  constructor() {
    this.rl = null;
  }

  /**
   * Inicializa a interface de linha de comando
   */
  initialize() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  /**
   * Fecha a interface de linha de comando
   */
  close() {
    if (this.rl) {
      this.rl.close();
    }
  }

  /**
   * Faz uma pergunta de forma ass√≠ncrona
   * @param {string} question - Pergunta a ser feita
   * @returns {Promise<string>} Resposta do usu√°rio
   */
  async askQuestion(question) {
    return new Promise((resolve) => {
      this.rl.question(question, (answer) => {
        resolve(answer.trim());
      });
    });
  }

  /**
   * Valida se uma string n√£o est√° vazia
   * @param {string} value - Valor a ser validado
   * @param {string} fieldName - Nome do campo para mensagem de erro
   * @returns {string} Valor validado
   * @throws {Error} Se o valor for inv√°lido
   */
  validateNonEmpty(value, fieldName) {
    if (!value || value.trim() === '') {
      throw new Error(`${fieldName} n√£o pode estar vazio`);
    }
    return value.trim();
  }

  /**
   * Valida se uma senha atende aos crit√©rios m√≠nimos de seguran√ßa
   * @param {string} password - Senha a ser validada
   * @returns {string} Senha validada
   * @throws {Error} Se a senha n√£o atender aos crit√©rios
   */
  validatePassword(password) {
    if (!password || password.length < 8) {
      throw new Error('Senha deve ter pelo menos 8 caracteres');
    }

    if (!/[A-Z]/.test(password)) {
      throw new Error('Senha deve conter pelo menos uma letra mai√∫scula');
    }

    if (!/[a-z]/.test(password)) {
      throw new Error('Senha deve conter pelo menos uma letra min√∫scula');
    }

    if (!/\d/.test(password)) {
      throw new Error('Senha deve conter pelo menos um n√∫mero');
    }

    return password;
  }

  /**
   * Obt√©m credenciais do usu√°rio com valida√ß√£o
   * @returns {Promise<Object>} Objeto com username e password
   */
  async getCredentials() {
    try {
      console.log('\nüîê Sistema de Criptografia de Senhas\n');
      console.log('Por favor, insira suas credenciais:\n');

      const username = await this.askQuestion('üë§ Nome de usu√°rio: ');
      const validatedUsername = this.validateNonEmpty(username, 'Nome de usu√°rio');

      const password = await this.askQuestion('üîí Senha: ');
      const validatedPassword = this.validatePassword(password);

      return {
        username: validatedUsername,
        password: validatedPassword
      };
    } catch (error) {
      throw new Error(`Erro na entrada de credenciais: ${error.message}`);
    }
  }

  /**
   * Exibe informa√ß√µes sobre o processo de criptografia
   * @param {string} username - Nome do usu√°rio
   * @param {string} encryptedHex - Senha criptografada em hexadecimal
   */
  displayEncryptionInfo(username, encryptedHex) {
    console.log('\n‚úÖ Criptografia conclu√≠da com sucesso!\n');
    console.log(`üë§ Usu√°rio: ${username}`);
    console.log(`üîê Senha criptografada: ${encryptedHex.substring(0, 32)}...`);
    console.log(`üìÅ Arquivos gerados:`);
    console.log(`   - passwordFile.txt`);
    console.log(`   - ${username}_chaveEIV.txt`);
  }

  /**
   * Exibe informa√ß√µes sobre o processo de descriptografia
   * @param {string} username - Nome do usu√°rio
   * @param {string} decryptedPassword - Senha descriptografada
   */
  displayDecryptionInfo(username, decryptedPassword) {
    console.log('\n‚úÖ Descriptografia conclu√≠da com sucesso!\n');
    console.log(`üë§ Usu√°rio: ${username}`);
    console.log(`üîì Senha descriptografada: ${decryptedPassword}`);
  }

  /**
   * Exibe mensagem de erro formatada
   * @param {Error} error - Erro a ser exibido
   */
  displayError(error) {
    console.error('\n‚ùå Erro:', error.message);
    if (process.env.NODE_ENV === 'development') {
      console.error('Stack trace:', error.stack);
    }
  }

  /**
   * Exibe informa√ß√µes de ajuda
   */
  displayHelp() {
    console.log('\nüìñ Ajuda - Sistema de Criptografia\n');
    console.log('Comandos dispon√≠veis:');
    console.log('  node cli.js          - Criptografar nova senha');
    console.log('  node cli.js --help   - Exibir esta ajuda');
    console.log('  node cli.js --decrypt - Descriptografar senha existente');
    console.log('\nPara mais informa√ß√µes, consulte o README.md');
  }

  /**
   * Exibe informa√ß√µes sobre o projeto
   */
  displayProjectInfo() {
    console.log('\nüöÄ Node Cryptography Demo v1.0.0');
    console.log('üîê Sistema seguro de criptografia de senhas');
          console.log('üìß Para suporte: your-email@example.com');
    console.log('‚≠ê GitHub: https://github.com/your-username/node-cryptography-demo\n');
  }
}

module.exports = CLI;
